<Type Name="NSMutableIndexSet" FullName="MonoMac.Foundation.NSMutableIndexSet">
  <TypeSignature Language="C#" Value="public class NSMutableIndexSet : MonoMac.Foundation.NSIndexSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSMutableIndexSet extends MonoMac.Foundation.NSIndexSet" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSIndexSet</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("NSMutableIndexSet", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>
      <format type="text/html">
        <h2 class="jump">Overview</h2>
      </format>
      <para>The <c>NSMutableIndexSet</c> class represents a mutable collection of unique unsigned integers, known as <i>indexes</i> because of the way they are used. This collection is referred to as a <i>mutable index set</i>.</para>
      <para>The values in a mutable index set are always sorted, so the order in which values are added is irrelevant.</para>
      <para>You must not subclass the <c>NSMutableIndexSet</c> class.</para>
      <format type="text/html">
        <h2 class="jump">Tasks</h2>
      </format>
      <format type="text/html">
        <h3 class="tasks">Adding Indexes</h3>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSMutableIndexSet.Add(System.UInt32)" />
            </c>
            <format type="text/html">
              <img data-abstract="Adds an index  to the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSMutableIndexSet.Add(MonoMac.Foundation.NSIndexSet)" />
            </c>
            <format type="text/html">
              <img data-abstract="Adds the indexes in an index set to the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSMutableIndexSet/addIndexesInRange:">- addIndexesInRange:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Adds the indexes in an index range to the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
      </list>
      <format type="text/html">
        <h3 class="tasks">Removing Indexes</h3>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSMutableIndexSet.Remove(System.UInt32)" />
            </c>
            <format type="text/html">
              <img data-abstract="Removes an index from the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSMutableIndexSet.Remove(MonoMac.Foundation.NSIndexSet)" />
            </c>
            <format type="text/html">
              <img data-abstract="Removes the indexes in an index set from the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSMutableIndexSet.Clear" />
            </c>
            <format type="text/html">
              <img data-abstract="Removes the receiverâ€™s indexes." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSMutableIndexSet/removeIndexesInRange:">- removeIndexesInRange:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Removes the indexes in an index range from the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
      </list>
      <format type="text/html">
        <h3 class="tasks">Shifting Index Groups</h3>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSMutableIndexSet.ShiftIndexes(System.UInt32,System.UInt32)" />
            </c>
            <format type="text/html">
              <img data-abstract="Shifts a group of indexes to the left or the right within the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
      </list>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableIndexSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableIndexSet (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableIndexSet (MonoMac.Foundation.NSIndexSet other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSIndexSet other) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithIndexSet:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="other" Type="MonoMac.Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
          <para>Initializes an allocated <c><format type="text/html"><a href="Reference.html#//apple_ref/doc/uid/20002197-SW1">NSIndexSet</a></format></c> object with an index set.</para>
        </summary>
        <remarks>
          <para>This method is a designated initializer for <c><format type="text/html"><a href="Reference.html#//apple_ref/doc/uid/20002197-SW1">NSIndexSet</a></format></c>.</para>
          <format type="text/html">
            <h5 class="tight">Availability</h5>
          </format>
          <list type="bullet">
            <item>
              <term>Available in iPhone OS 2.0 and later.</term>
            </item>
          </list>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableIndexSet (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advatnage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsability to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoMac's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableIndexSet (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableIndexSet (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 index) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <para>Initializes an allocated <c><format type="text/html"><a href="Reference.html#//apple_ref/doc/uid/20002197-SW1">NSIndexSet</a></format></c> object with an index.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (MonoMac.Foundation.NSIndexSet other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class MonoMac.Foundation.NSIndexSet other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("addIndexes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="MonoMac.Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
          <para>Adds the indexes in an index set to the receiver.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("addIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <para>Adds an index  to the receiver.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("removeAllIndexes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Removes the receiverâ€™s indexes.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (MonoMac.Foundation.NSIndexSet other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class MonoMac.Foundation.NSIndexSet other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("removeIndexes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="MonoMac.Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
          <para>Removes the indexes in an index set from the receiver.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("removeIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <para>Removes an index from the receiver.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShiftIndexes">
      <MemberSignature Language="C#" Value="public virtual void ShiftIndexes (uint startIndex, uint delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShiftIndexes(unsigned int32 startIndex, unsigned int32 delta) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("shiftIndexesStartingAtIndex:by:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.UInt32" />
        <Parameter Name="delta" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startIndex">To be added.</param>
        <param name="delta">To be added.</param>
        <summary>
          <para>Shifts a group of indexes to the left or the right within the receiver.</para>
        </summary>
        <remarks>
          <para>The group of indexes shifted is made up by <i>startIndex</i> and the indexes that follow it in the receiver.</para>
          <para>A left shift deletes the indexes in the range <c>(</c><i>startIndex</i><c>-</c><i>delta</i><c>,</c><i>delta</i><c>)</c> from the receiver.</para>
          <para>A right shift inserts empty space in the range <c>(</c><i>indexStart</i><c>,</c><i>delta</i><c>)</c> in the receiver.</para>
          <format type="text/html">
            <h5 class="tight">Availability</h5>
          </format>
          <list type="bullet">
            <item>
              <term>Available in iPhone OS 2.0 and later.</term>
            </item>
          </list>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace CBinding {
    
    public partial class GeneralOptionsPanel {
        
        private Gtk.Table table1;
        
        private Gtk.ComboBox cCombo;
        
        private Gtk.ComboBox cppCombo;
        
        private Gtk.Label label1;
        
        private Gtk.Label label2;
        
        private Gtk.CheckButton parseLocalVariablesCheck;
        
        private Gtk.CheckButton parseSystemTagsCheck;
        
        protected virtual void Build() {
            Stetic.Gui.Initialize(this);
            // Widget CBinding.GeneralOptionsPanel
            Stetic.BinContainer.Attach(this);
            this.Name = "CBinding.GeneralOptionsPanel";
            // Container child CBinding.GeneralOptionsPanel.Gtk.Container+ContainerChild
            this.table1 = new Gtk.Table(((uint)(4)), ((uint)(3)), false);
            this.table1.Name = "table1";
            this.table1.RowSpacing = ((uint)(6));
            this.table1.ColumnSpacing = ((uint)(6));
            // Container child table1.Gtk.Table+TableChild
            this.cCombo = Gtk.ComboBox.NewText();
            this.cCombo.TooltipMarkup = "Default compiler to use for new C projects.";
            this.cCombo.Name = "cCombo";
            this.table1.Add(this.cCombo);
            Gtk.Table.TableChild w1 = ((Gtk.Table.TableChild)(this.table1[this.cCombo]));
            w1.LeftAttach = ((uint)(1));
            w1.RightAttach = ((uint)(2));
            w1.XOptions = ((Gtk.AttachOptions)(4));
            w1.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.cppCombo = Gtk.ComboBox.NewText();
            this.cppCombo.TooltipMarkup = "Default compiler to use for new C++ projects.";
            this.cppCombo.Name = "cppCombo";
            this.table1.Add(this.cppCombo);
            Gtk.Table.TableChild w2 = ((Gtk.Table.TableChild)(this.table1[this.cppCombo]));
            w2.TopAttach = ((uint)(1));
            w2.BottomAttach = ((uint)(2));
            w2.LeftAttach = ((uint)(1));
            w2.RightAttach = ((uint)(2));
            w2.XOptions = ((Gtk.AttachOptions)(4));
            w2.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.label1 = new Gtk.Label();
            this.label1.Name = "label1";
            this.label1.Xpad = 10;
            this.label1.Xalign = 0F;
            this.label1.LabelProp = Mono.Unix.Catalog.GetString("Default C Compiler:");
            this.table1.Add(this.label1);
            Gtk.Table.TableChild w3 = ((Gtk.Table.TableChild)(this.table1[this.label1]));
            w3.XOptions = ((Gtk.AttachOptions)(4));
            w3.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.label2 = new Gtk.Label();
            this.label2.Name = "label2";
            this.label2.Xpad = 10;
            this.label2.Xalign = 0F;
            this.label2.LabelProp = Mono.Unix.Catalog.GetString("Default C++ Compiler:");
            this.table1.Add(this.label2);
            Gtk.Table.TableChild w4 = ((Gtk.Table.TableChild)(this.table1[this.label2]));
            w4.TopAttach = ((uint)(1));
            w4.BottomAttach = ((uint)(2));
            w4.XOptions = ((Gtk.AttachOptions)(4));
            w4.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.parseLocalVariablesCheck = new Gtk.CheckButton();
            this.parseLocalVariablesCheck.CanFocus = true;
            this.parseLocalVariablesCheck.Name = "parseLocalVariablesCheck";
            this.parseLocalVariablesCheck.Label = Mono.Unix.Catalog.GetString("Parse Local Variables");
            this.parseLocalVariablesCheck.DrawIndicator = true;
            this.parseLocalVariablesCheck.UseUnderline = true;
            this.table1.Add(this.parseLocalVariablesCheck);
            Gtk.Table.TableChild w5 = ((Gtk.Table.TableChild)(this.table1[this.parseLocalVariablesCheck]));
            w5.TopAttach = ((uint)(3));
            w5.BottomAttach = ((uint)(4));
            w5.XPadding = ((uint)(10));
            w5.XOptions = ((Gtk.AttachOptions)(4));
            w5.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.parseSystemTagsCheck = new Gtk.CheckButton();
            this.parseSystemTagsCheck.TooltipMarkup = "Choose whether you want to parse system tags or not, if you do you will get completion for things like printf, but the tag parsing process will take considerably longer.";
            this.parseSystemTagsCheck.CanFocus = true;
            this.parseSystemTagsCheck.Name = "parseSystemTagsCheck";
            this.parseSystemTagsCheck.Label = Mono.Unix.Catalog.GetString("Parse System Tags");
            this.parseSystemTagsCheck.DrawIndicator = true;
            this.parseSystemTagsCheck.UseUnderline = true;
            this.table1.Add(this.parseSystemTagsCheck);
            Gtk.Table.TableChild w6 = ((Gtk.Table.TableChild)(this.table1[this.parseSystemTagsCheck]));
            w6.TopAttach = ((uint)(2));
            w6.BottomAttach = ((uint)(3));
            w6.XPadding = ((uint)(10));
            w6.XOptions = ((Gtk.AttachOptions)(4));
            w6.YOptions = ((Gtk.AttachOptions)(4));
            this.Add(this.table1);
            if ((this.Child != null)) {
                this.Child.ShowAll();
            }
            this.Show();
            this.cppCombo.Changed += new System.EventHandler(this.OnCppComboChanged);
            this.cCombo.Changed += new System.EventHandler(this.OnCComboChanged);
        }
    }
}

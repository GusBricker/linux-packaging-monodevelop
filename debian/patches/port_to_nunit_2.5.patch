--- a/src/addins/NUnit/NUnitRunner/NUnitTestRunner.cs
+++ b/src/addins/NUnit/NUnitRunner/NUnitTestRunner.cs
@@ -153,7 +153,7 @@
 		
 		public bool Pass (ITest test)
 		{
-			if ((test is global::NUnit.Core.TestCase) && test.TestName.FullName == name)
+			if ((test is global::NUnit.Core.Test) && test.TestName.FullName == name)
 				return true;
 			if (test.Tests != null) {
 				foreach (ITest ct in test.Tests) {
--- a/src/addins/NUnit/Services/ExternalTestRunner.cs
+++ b/src/addins/NUnit/Services/ExternalTestRunner.cs
@@ -46,27 +46,28 @@
 {
 	class ExternalTestRunner: RemoteProcessObject
 	{
-		NUnitTestRunner runner;
-
-		public ExternalTestRunner ( )
-		{
-			// In some cases MS.NET can't properly resolve assemblies even if they
-			// are already loaded. For example, when deserializing objects from remoting.
-			AppDomain.CurrentDomain.AssemblyResolve += delegate (object s, ResolveEventArgs args) {
-				foreach (Assembly am in AppDomain.CurrentDomain.GetAssemblies ()) {
-					if (am.GetName ().FullName == args.Name)
-						return am;
-				}
-				return null;
+		NUnitTestRunner runner;
+
+		public ExternalTestRunner ( )
+		{
+			// In some cases MS.NET can't properly resolve assemblies even if they
+			// are already loaded. For example, when deserializing objects from remoting.
+			AppDomain.CurrentDomain.AssemblyResolve += delegate (object s, ResolveEventArgs args) {
+				foreach (Assembly am in AppDomain.CurrentDomain.GetAssemblies ()) {
+					if (am.GetName ().FullName == args.Name)
+						return am;
+				}
+				return null;
 			};
 			
-			// Preload the runner assembly. Required because TestNameFilter is implemented there
+			// Preload the runner assembly. Required because TestNameFilter is implemented there
 			string asm = Path.Combine (Path.GetDirectoryName (GetType ().Assembly.Location), "NUnitRunner.dll");
 			Assembly.LoadFrom (asm);
+                        ServiceManager.Services.AddService( new ProjectService() );
 		}
 		
 		public UnitTestResult Run (IRemoteEventListener listener, ITestFilter filter, string path, string suiteName, List<string> supportAssemblies)
-		{
+		{
 			NUnitTestRunner runner = GetRunner (path);
 			EventListenerWrapper listenerWrapper = listener != null ? new EventListenerWrapper (listener) : null;
 			
@@ -81,7 +82,7 @@
 		}
 		
 		NUnitTestRunner GetRunner (string assemblyPath)
-		{
+		{
 			TestPackage package = new TestPackage (assemblyPath);
 			package.Settings ["ShadowCopyFiles"] = false;
 			DomainManager dm = new DomainManager ();
@@ -116,7 +117,7 @@
 		{
 		}
 		
-		public void SuiteFinished (TestSuiteResult result)
+		public void SuiteFinished (TestResult result)
 		{
 			testSuites.Pop ();
 			wrapped.SuiteFinished (GetTestName (result.Test), GetLocalTestResult (result));
@@ -129,7 +130,7 @@
 			wrapped.SuiteStarted (GetTestName (suite));
 		}
 		
-		public void TestFinished (TestCaseResult result)
+		public void TestFinished (TestResult result)
 		{
 			wrapped.TestFinished (GetTestName (result.Test), GetLocalTestResult (result));
 		}
@@ -187,42 +188,42 @@
 		{
 			UnitTestResult res = new UnitTestResult ();
 			res.Message = t.Message;
-			
-			if (t is TestSuiteResult) {
+
+			if (t.IsFailure) {
+				res.Status = ResultStatus.Failure;
+				res.TotalFailures = 1;
+			}
+			else if (!t.Executed) {
+				res.Status = ResultStatus.Ignored;
+				res.TotalIgnored = 1;
+			}
+			else {
+				res.Status = ResultStatus.Success;
+				res.TotalSuccess = 1;
+			}
+
+			if (t.Results != null) {
 				int s=0, f=0, i=0;
-				CountResults ((TestSuiteResult)t, ref s, ref f, ref i);
-				res.TotalFailures = f;
-				res.TotalSuccess = s;
-				res.TotalIgnored = i;
+				CountResults ((TestResult)t, ref s, ref f, ref i);
+				res.TotalFailures += f;
+				res.TotalSuccess += s;
+				res.TotalIgnored += i;
 				if (f > 0)
 					res.Status |= ResultStatus.Failure;
 				if (s > 0)
 					res.Status |= ResultStatus.Success;
 				if (i > 0)
 					res.Status |= ResultStatus.Ignored;
-			} else {
-				if (t.IsFailure) {
-					res.Status = ResultStatus.Failure;
-					res.TotalFailures = 1;
-				}
-				else if (!t.Executed) {
-					res.Status = ResultStatus.Ignored;
-					res.TotalIgnored = 1;
-				}
-				else {
-					res.Status = ResultStatus.Success;
-					res.TotalSuccess = 1;
-				}
+                        }
 			
-				if (string.IsNullOrEmpty (res.Message)) {
-					if (t.IsFailure)
-						res.Message = GettextCatalog.GetString ("Test failed");
-					else if (!t.Executed)
-						res.Message = GettextCatalog.GetString ("Test ignored");
-					else {
-						res.Message = GettextCatalog.GetString ("Test successful") + "\n\n";
-						res.Message += GettextCatalog.GetString ("Execution time: {0:0.00}ms", t.Time);
-					}
+			if (string.IsNullOrEmpty (res.Message)) {
+				if (t.IsFailure)
+					res.Message = GettextCatalog.GetString ("Test failed");
+				else if (!t.Executed)
+					res.Message = GettextCatalog.GetString ("Test ignored");
+				else {
+					res.Message = GettextCatalog.GetString ("Test successful") + "\n\n";
+					res.Message += GettextCatalog.GetString ("Execution time: {0:0.00}ms", t.Time);
 				}
 			}
 			res.StackTrace = t.StackTrace;
@@ -238,21 +239,21 @@
 			return res;
 		}		
 		
-		void CountResults (TestSuiteResult ts, ref int s, ref int f, ref int i)
+		void CountResults (TestResult ts, ref int s, ref int f, ref int i)
 		{
 			if (ts.Results == null)
 				return;
 
 			foreach (TestResult t in ts.Results) {
-				if (t is TestCaseResult) {
+				if (t is TestResult) {
 					if (t.IsFailure)
 						f++;
 					else if (!t.Executed)
 						i++;
 					else
 						s++;
-				} else if (t is TestSuiteResult) {
-					CountResults ((TestSuiteResult) t, ref s, ref f, ref i);
+				} else if (t is TestResult) {
+					CountResults ((TestResult) t, ref s, ref f, ref i);
 				}
 			}
 		}
